! Copyright (c) 2016, 2017  Robert RÃ¼ger
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.


!   ftlHashMap
!   ==========
!
! Unordered maps are associative containers that store elements formed by the combination of a key value and a mapped
! value, and which allows for fast retrieval of individual elements based on their keys.
!
! In a ftlHashMap, the key value is generally used to uniquely identify the element, while the mapped value is an
! object with the content associated to this key. Types of key and mapped value may differ.
!
! Internally, the elements in the ftlHashMap are not sorted in any particular order with respect to either their key or
! mapped values, but organized into buckets depending on their hash values to allow for fast access to individual elements
! directly by their key values (with a constant average time complexity on average).
!
! ftlHashMap containers are faster than map containers to access individual elements by their key, although they are
! generally less efficient for range iteration through a subset of their elements.
!
!
! Iterators in the container are at least forward iterators.

#define FTL_CONTAINER ftlHashMap
#define FTL_CONTAINER_PROVIDES_FORWARD_ITERATOR

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlHashMap
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlHashMap
#endif
#if !defined(FTL_TEMPLATE_KEYTYPE)
#error FTL_TEMPLATE_KEYTYPE must be defined when instantiating ftlHashMap
#endif
#if !defined(FTL_TEMPLATE_KEYTYPE_NAME)
#error FTL_TEMPLATE_KEYTYPE_NAME must be defined when instantiating ftlHashMap
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif

#ifdef FTL_TEMPLATE_KEYTYPE_IS_DERIVED
#define FTL_TEMPLATE_KEYTYPE_WRAP type(FTL_TEMPLATE_KEYTYPE)
#else
#define FTL_TEMPLATE_KEYTYPE_WRAP FTL_TEMPLATE_KEYTYPE
#endif


module CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif
#ifdef FTL_TEMPLATE_KEYTYPE_MODULE
   use FTL_TEMPLATE_KEYTYPE_MODULE
#endif

   use ftlHashModule

   implicit none
   private

! ====== Type of the ftlHashMap container itself ============================================================================

   type :: BaseEntry
      class(BaseEntry), pointer :: next => null()
   end type

   type, extends(BaseEntry) :: DataEntry
      FTL_TEMPLATE_KEYTYPE_WRAP :: key
      FTL_TEMPLATE_TYPE_WRAP    :: value
   end type


   abstract interface

      integer function Hash(key)
#ifdef FTL_TEMPLATE_KEYTYPE_IS_DERIVED
         import :: FTL_TEMPLATE_KEYTYPE
#endif
         FTL_TEMPLATE_KEYTYPE_WRAP, intent(in) :: key
      end function

      logical function Comparator(key1, key2)
#ifdef FTL_TEMPLATE_KEYTYPE_IS_DERIVED
         import :: FTL_TEMPLATE_KEYTYPE
#endif
         FTL_TEMPLATE_KEYTYPE_WRAP, intent(in) :: key1, key2
      end function

   end interface


   type, public :: CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)
      private

      integer                                :: psize = 0
      real                                   :: maxLoadFactor = 1.0
      type(BaseEntry)      , allocatable     :: buckets(:)
      procedure(Hash)      , pointer, nopass :: hash => null()
      procedure(Comparator), pointer, nopass :: comp => null()

   contains
      private

      procedure         :: NewDefault
      generic  , public :: New => NewDefault

      procedure, public :: Delete
#ifndef FTL_NO_FINALIZERS
      final             :: Finalizer
#endif

      procedure         :: BeginHashMap
      generic  , public :: Begin => BeginHashMap
      procedure         :: EndHashMap
      generic  , public :: End => EndHashMap

      procedure, public :: Empty
      procedure         :: SizeHashMap
      generic  , public :: Size => SizeHashMap

      procedure, public :: Set
      procedure, public :: Get
      procedure, public :: Has

      procedure, public :: Find

      procedure         :: EraseKey
      procedure         :: EraseSingleIterator
      procedure         :: EraseIteratorPair
      generic  , public :: Erase => EraseKey, EraseSingleIterator, EraseIteratorPair

      procedure, public :: Clear

      procedure, public :: BucketCount
      procedure, public :: BucketSize
      procedure, public :: Bucket

      procedure, public :: LoadFactor
      procedure, public :: SetMaxLoadFactor
      procedure, public :: GetMaxLoadFactor
      procedure, public :: Rehash
      procedure, public :: Reserve

   end type

   public :: Begin
   interface Begin
      module procedure BeginHashMap
   end interface

   public :: End
   interface End
      module procedure EndHashMap
   end interface

   public :: Size
   interface Size
      module procedure SizeHashMap
   end interface


! ====== Type of an iterator over a ftlHashMap container =========================================================================

   type, public :: CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)
      private

      type(BaseEntry)          , pointer         :: buckets(:) => null()
      integer                                    :: bIdx = 0
      class(BaseEntry)         , pointer         :: entr => null()
      FTL_TEMPLATE_TYPE_WRAP   , pointer, public :: value => null()

   contains
      private

      procedure         :: NewItDefault
      procedure         :: NewItCopyOther
      generic  , public :: New => NewItDefault, NewItCopyOther

      procedure, public :: Key

      procedure, public :: Inc

   end type

   public :: operator(==)
   interface operator(==)
      module procedure EqualOther
   end interface

   public :: operator(/=)
   interface operator(/=)
      module procedure UnequalOther
   end interface


contains



! ====== Implementation of ftlHashMap methods ====================================================================================


   ! Constructs an unordered_map container object, initializing its contents depending on the constructor version used:
   !
   subroutine NewDefault(self, n)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                                                 , intent(in)    :: n

      call self%Delete()
      allocate(self%buckets(n))

   end subroutine


   ! Destructs the container object. This calls each of the contained element's destructors, and deallocates all the
   ! storage capacity allocated by the unordered_map container.
   !
   subroutine Delete(self)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      call self%Clear()

      if (allocated(self%buckets)) deallocate(self%buckets)
      self%maxLoadFactor = 1.0

   end subroutine

#ifndef FTL_NO_FINALIZERS
   subroutine Finalizer(self)
      type(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      call self%Delete()
   end subroutine
#endif



   ! =============> Iterators:



   ! Returns an iterator pointing to the first element in the ftlHashMap container.
   !
   ! Notice that an ftlHashMap object makes no guarantees on which specific element is considered its first element.
   ! But, in any case, the range that goes from its begin to its end covers all the elements in the container.
   !
   type(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)) function BeginHashMap(self) result(Begin)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      Begin%buckets => self%buckets
      Begin%bIdx = 1

      do while (Begin%bIdx <= size(Begin%buckets))
         if (associated(Begin%buckets(Begin%bIdx)%next)) then
            Begin%entr => Begin%buckets(Begin%bIdx)%next
            select type (entr => Begin%entr)
            type is (DataEntry) ! always true
               Begin%value => entr%value
            end select
            return
         endif
         Begin%bIdx = Begin%bIdx + 1
      enddo

   end function



   ! Returns an iterator pointing to the past-the-end element in the ftlHashMap container.
   !
   ! The iterator returned by end does not point to any element, but to the position that follows the last element in
   ! the ftlHashMap container (its past-the-end position). Thus, the value returned shall not be dereferenced - it is
   ! generally used to describe the open-end of a range, such as [begin,end).
   !
   ! Notice that an ftlHashMap object makes no guarantees on which order its elements follow. But, in any case, the
   ! range that goes from its begin to its end covers all the elements in the container.
   !
   type(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)) function EndHashMap(self) result(End)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      End%buckets => self%buckets
      End%bIdx = size(self%buckets) + 1

   end function



   ! =============> Capacity:



   ! Returns a logical value indicating whether the unordered_map container is empty, i.e. whether its size is 0.
   !
   ! This function does not modify the content of the container in any way. To clear the contents, member
   ! function ftlHashMap%Clear() exists.
   !
   pure logical function Empty(self)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Empty = (self%psize == 0)

   end function



   ! Returns the number of elements in the ftlHashMap container.
   !
   pure integer function SizeHashMap(self) result(size)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      size = self%psize

   end function



   ! =============> Element access:



   ! Sets the entry with key to value. If no entry with key exists, a new entry will be added.
   !
   subroutine Set(self, key, value)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                               , intent(in)            :: key
      FTL_TEMPLATE_TYPE_WRAP                                                  , intent(in)            :: value

      class(BaseEntry), pointer :: entr

      entr => self%buckets(self%Bucket(key))
      do while (.true.)
         select type(entr)
         type is (DataEntry)
            if (key == entr%key) then
               entr%value = value
               return
            endif
         end select
         if (associated(entr%next)) then
            entr => entr%next
         else
            exit
         endif
      end do

      allocate(DataEntry::entr%next)
      self%psize = self%psize + 1

      entr => entr%next
      select type (entr)
      type is (DataEntry)
         entr%key = key
         entr%value = value
      end select

      if (self%LoadFactor() > self%maxLoadFactor) call self%Rehash(2 * self%BucketCount())

   end subroutine



   ! Get a pointer to the value stored for key. If no entry with key exists a null pointer is returned.
   !
   function Get(self, key) result(value)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                               , intent(in)         :: key
      FTL_TEMPLATE_TYPE_WRAP, pointer                                                                   :: value

      class(BaseEntry), pointer :: entr

      entr => self%buckets(self%Bucket(key))

      do while (associated(entr))
         select type(entr)
         type is (DataEntry)
            if (key == entr%key) then
               value => entr%value
               return
            endif
         end select
         entr => entr%next
      end do

      ! key not found
      nullify(value)

   end function



   ! Checks whether the hash map has an entry for key.
   !
   logical function Has(self, key)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                               , intent(in)            :: key

      class(BaseEntry), pointer :: entr

      entr => self%buckets(self%Bucket(key))

      do while (associated(entr))
         select type(entr)
         type is (DataEntry)
            if (key == entr%key) then
               Has = .true.
               return
            endif
         end select
         entr => entr%next
      end do

      Has = .false.

   end function



   ! Searches the container for an element with key and returns an iterator to it if found, otherwise it returns an
   ! iterator to ftlHashMap%End (the element past the end of the container).
   !
   ! Another member function, ftlHashMap%Has, can be used to just check whether a particular key exists.
   !
   ! The mapped value can also be accessed directly by using member function ftlHashMap%Get.
   !
   type(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)) function Find(self, key)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                               , intent(in)         :: key

      Find = self%Begin()
      do while (Find /= self%End())
         if (Find%Key() == key) exit
         call Find%Inc()
      enddo

   end function



   ! =============> Modifiers:



   ! Removes from the ftlHashMap container either a single element or a range of elements ([first,last)).
   !
   ! This effectively reduces the container size by the number of elements removed.
   !
   subroutine EraseKey(self, key)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                               , intent(in)    :: key

      type(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: it

      it = self%Find(key)
      if (it /= self%End()) call self%EraseSingleIterator(it)

   end subroutine
   !
   subroutine EraseSingleIterator(self, it)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME))        , intent(inout), target :: self
      type(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)            :: it

      class(BaseEntry), pointer :: trailer, scout, deleter
      logical :: deleteThis

      if (.not.associated(it%buckets,self%buckets)) return

      scout => self%buckets(it%bIdx)

      do while (associated(scout))
         deleteThis = .false.
         select type(scout)
         type is (DataEntry)
            deleteThis = (it%Key() == scout%key)
         end select
         if (deleteThis) then
            deleter => scout
            scout => scout%next
            if (associated(scout)) then
               trailer%next => scout
            else
               nullify(trailer%next)
            endif
            deallocate(deleter)
            self%psize = self%psize - 1
            return
         endif
         trailer => scout
         scout => scout%next
      end do

   end subroutine
   !
   subroutine EraseIteratorPair(self, first, last)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME))        , intent(inout) :: self
      type(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first, last

      type(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: walker, deleter

      walker = first
      do while (walker /= last)
         deleter = walker
         call walker%Inc()
         call self%EraseSingleIterator(deleter)
      end do

   end subroutine



   ! All the elements in the ftlHashMap are removed from the container, leaving it with a size of 0.
   !
   subroutine Clear(self)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      integer :: b
      class(BaseEntry), pointer :: walker, deleter

      if (allocated(self%buckets)) then
         do b = 1, size(self%buckets)
            walker => self%buckets(b)
            nullify(deleter)
            if (associated(walker%next)) then
               walker => walker%next
               deleter => walker
            endif
            do while (associated(walker%next))
               walker => walker%next
               deallocate(deleter)
               deleter => walker
            enddo
            if (associated(deleter)) deallocate(deleter)
         enddo
      endif
      self%psize = 0

   end subroutine



   ! =============> Buckets:



   ! Returns the number of buckets in the ftlHashMap container.
   !
   ! A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash value of
   ! their key.
   !
   ! The number of buckets influences directly the load factor of the container's hash table (and thus the probability of
   ! collision). The container automatically increases the number of buckets to keep the load factor below a specific
   ! threshold (its maxLoadFactor), causing a rehash each time the number of buckets needs to be increased.
   !
   pure integer function BucketCount(self)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      BucketCount = size(self%buckets)

   end function



   ! Returns the number of elements in bucket n.
   !
   ! A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash value of
   ! their key.
   !
   ! The number of elements in a bucket influences the time it takes to access a particular element in the bucket. The
   ! container automatically increases the number of buckets to keep the load factor (which is the average bucket size)
   ! below its maxLoadFactor.
   !
   integer function BucketSize(self, n)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      integer                                                                 , intent(in)         :: n

      class(BaseEntry), pointer :: entr

      entr => self%buckets(n)
      BucketSize = 0
      do while (associated(entr%next))
         BucketSize = BucketSize + 1
         entr => entr%next
      enddo

   end function



   ! Returns the bucket number where the element with key is located.
   !
   ! A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash value of
   ! their key. Buckets are numbered from 1 to bucket_count.
   !
   ! Individual elements in a bucket can be accessed by means of the range iterators returned by ftlHashMap%Begin()
   ! and ftlHashMap%End().
   !
   pure integer function Bucket(self, key)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                               , intent(in) :: key

      Bucket = mod(ftlHash(key), size(self%buckets)) + 1

   end function



   ! =============> Hash policy:



   ! Returns the current load factor in the ftlHashMap container.
   !
   ! The load factor is the ratio between the number of elements in the container (its size) and the number of buckets:
   !
   ! loadFactor = size / bucketCount
   !
   ! The load factor influences the probability of collision in the hash table (i.e., the probability of two elements
   ! being located in the same bucket). The container automatically increases the number of buckets to keep the load
   ! factor below a specific threshold (its maxLoadFactor), causing a rehash each time an expansion is needed.
   !
   ! To retrieve or change this threshold, use member functions GetMaxLoadFactor and SetMaxLoadFactor.
   !
   pure real function LoadFactor(self)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      LoadFactor = real(self%psize) / real(self%BucketCount())

   end function
   !
   pure real function GetMaxLoadFactor(self)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      GetMaxLoadFactor = self%maxLoadFactor

   end function
   !
   subroutine SetMaxLoadFactor(self, maxLoadFactor)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      real                                                                    , intent(in)    :: maxLoadFactor

      if (maxLoadFactor > 0.0) then
         self%maxLoadFactor = maxLoadFactor
         if (self%LoadFactor() > self%maxLoadFactor) call self%Rehash(2 * self%BucketCount())
      endif

   end subroutine



   ! Sets the number of buckets in the container to n or more.
   !
   ! If n is greater than the current number of buckets in the container (bucketCount), a rehash is forced. The new
   ! bucket count can either be equal or greater than n.
   !
   ! If n is lower than the current number of buckets in the container (bucketCount), the function may have no effect
   ! on the bucket count and may not force a rehash.
   !
   ! A rehash is the reconstruction of the hash table: All the elements in the container are rearranged according to
   ! their hash value into the new set of buckets. This may alter the order of iteration of elements within the
   ! container.
   !
   ! Rehashes are automatically performed by the container whenever its load factor is going to surpass its
   ! maxLoadFactor in an operation.
   !
   ! Notice that this function expects the number of buckets as argument. A similar function exists,
   ! ftlHashMap%Reserve(), that expects the number of elements in the container as argument.
   !
   subroutine Rehash(self, n)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      integer                                                                 , intent(in)            :: n

      type(BaseEntry), allocatable, target :: newbuckets(:)
      class(BaseEntry), pointer :: eorg, edel, enew
      integer :: borg


      if (n <= 0) return

      allocate(newbuckets(n))

      do borg = 1, size(self%buckets)
         eorg => self%buckets(borg)
         do while (associated(eorg))
            select type (eorg)
            type is (DataEntry)
               enew => newbuckets(mod(ftlHash(eorg%key), n) + 1)
               do while (associated(enew%next))
                  enew => enew%next
               enddo
               allocate(DataEntry::enew%next)
               enew => enew%next
               select type (enew)
               type is (DataEntry)
                  enew%key = eorg%key
                  enew%value = eorg%value
               end select
            end select
            edel => eorg
            eorg => eorg%next
            if (.not.associated(edel, self%buckets(borg))) deallocate(edel)
         enddo
      enddo

      call move_alloc(newbuckets, self%buckets)

   end subroutine



   ! Sets the number of buckets in the container (bucketCount) to the most appropriate to contain at least n elements.
   !
   ! If n is greater than the current bucketCount multiplied by the maxLoadFactor, the container's bucketCount is
   ! increased and a rehash is forced.
   !
   ! If n is lower than that, the function may have no effect.
   !
   subroutine Reserve(self, n)
      class(CAT3(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                                                 , intent(in)    :: n

      if (n > self%BucketCount() * self%maxLoadFactor) call self%Rehash(2 * self%BucketCount())

   end subroutine



! ====== Implementation of ftlHashMapIterator methods ============================================================================



   subroutine NewItDefault(self)
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self

      ! Nothing to do here: intent(out) already resets everything

   end subroutine
   !
   subroutine NewItCopyOther(self, other)
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)  :: other

      self%buckets => other%buckets
      self%bIdx = other%bIdx
      self%entr => other%entr

      if (associated(self%entr)) then
         select type (entr => self%entr)
         type is (DataEntry)
            self%value => entr%value
         end select
      endif

   end subroutine



   ! Getter method for the key of the entry an interator is pointing to. We have to make this a method so that the
   ! key can not be changed through the iterator. This would seriously mess up the hash map ...
   !
   pure FTL_TEMPLATE_KEYTYPE_WRAP function Key(self)
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self

      if (associated(self%entr)) then
         select type (entr => self%entr)
         type is (DataEntry)
            key = entr%key
         end select
      endif

   end function



   ! =============> Arithmetic operations:



   subroutine Inc(self)
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      if (associated(self%entr%next)) then
         self%entr => self%entr%next
         select type (entr => self%entr)
         type is (DataEntry) ! always true
            self%value => entr%value
         end select
      else
         do while (.true.)
            self%bIdx = self%bIdx + 1
            if (self%bIdx > size(self%buckets)) then
               nullify(self%entr)
               nullify(self%value)
               return
            endif
            if (associated(self%buckets(self%bIdx)%next)) then
               self%entr => self%buckets(self%bIdx)%next
               select type (entr => self%entr)
               type is (DataEntry) ! always true
                  self%value => entr%value
               end select
               return
            endif
         enddo
      endif

   end subroutine



   ! =============> Logical operations:



   pure logical function EqualOther(self, other)
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      EqualOther = &
          associated(self%entr, other%entr) .or. &
         (associated(self%buckets, other%buckets) .and. (self%bIdx == size(self%buckets) + 1) .and. (self%bIdx == other%bIdx) )

   end function
   !
   pure logical function UnequalOther(self, other)
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT4(ftlHashMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      UnequalOther = .not.EqualOther(self, other)

   end function


end module
#endif
